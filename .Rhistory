alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Now, we can make list of the data to use in the jags function
datax <- list(
N = gopher$year  %>%
length(),
S = gopher$shells,        # Number of shells
A = gopher$Area,          # Area offset
Cov_2004 = gopher$Cov_2004,  # Effect of the year 2004
Cov_2005 = gopher$Cov_2005,  # Effect of the year 2005
Cov_2006 = gopher$Cov_2006  # Effect of the year 2006
)
# Parameters to estimate
params <- c("mu.0", "alpha_0","alpha_1", "alpha_2")
# Initialising the chains
init1 <- list(mu.0 = -0.5,alpha_0=-0.5, alpha_1=-0.5, alpha_2=-0.5)
init2 <- list(mu.0 = 0.5, alpha_0=0.5, alpha_1=0.5, alpha_2=0.5)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M3 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = year_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC3 <- M3$BUGSoutput$DIC
# Chunk 15
# The year model function
year_prevalence_model <- function(){
# This model takes into account the variable year with it's 3 modalities.
# Likelihood
for (i in 1:N){  # Loop over observations
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + b.prev * prev[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Now, we can make list of the data to use in the jags function
datax <- list(
N = gopher$year  %>%
length(),
S = gopher$shells,        # Number of shells
A = gopher$Area,          # Area offset
prev=gopher$standprev,     # Standardized prev
Cov_2004 = gopher$Cov_2004,  # Effect of the year 2004
Cov_2005 = gopher$Cov_2005,  # Effect of the year 2005
Cov_2006 = gopher$Cov_2006  # Effect of the year 2006
)
# Parameters to estimate
params <- c("mu.0", "alpha_0","alpha_1", "alpha_2","b.prev")
# Initialising the chains
init1 <- list(mu.0 = -0.5,alpha_0=-0.5, alpha_1=-0.5, alpha_2=-0.5,b.prev =-0.5)
init2 <- list(mu.0 = 0.5, alpha_0=0.5, alpha_1=0.5, alpha_2=0.5,b.prev=0.5)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M4 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = year_prevalence_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC4 <- M4$BUGSoutput$DIC
# Chunk 16
year_site_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + gamma[site[i]]+ alpha_0* Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
for (j in 1:nb.sites){
gamma[j] ~ dnorm(0, tau.s)
}
# Priors
mu.0 ~ dnorm(0, 0.001)
sd.s ~ dunif(0, 100)
tau.s <- 1 / (sd.s * sd.s)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = ifelse(gopher$year == 2004, 1, 0),
Cov_2005 = ifelse(gopher$year == 2005, 1, 0),
Cov_2006 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "sd.s","alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5,
"sd.s" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5,
"sd.s" = 1.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M5 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = year_site_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC5 <- M5$BUGSoutput$DIC
# Chunk 17
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + gamma[site[i]] + b.prev * prev[i] + alpha_0* Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
for (j in 1:nb.sites){
gamma[j] ~ dnorm(0, tau.s)
}
# Priors
mu.0 ~ dnorm(0, 0.001)
sd.s ~ dunif(0, 100)
tau.s <- 1 / (sd.s * sd.s)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = ifelse(gopher$year == 2004, 1, 0),
Cov_2005 = ifelse(gopher$year == 2005, 1, 0),
Cov_2006 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s","alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5,
"sd.s" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5,
"sd.s" = 1.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC6 <- M6$BUGSoutput$DIC
# Chunk 18
gopher_discont_prev <- function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
mu.0 ~ dnorm(0, 0.001)
b.prev ~ dnorm(0, 0.001)
}
datax <- list(N = length(gopher$shells),
prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5, b.prev=0.5)
init2 <- list(mu.0= -0.5, b.prev= -0.5)
inits <- list(init1, init2)
params <- c("mu.0", "b.prev")
nb.iterations <- 9000
nb.burnin <- 4500
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1,
quiet = TRUE
)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
# Chunk 19
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
# Chunk 20
disc_full_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M9 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_full_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC9 <- M9$BUGSoutput$DIC
# Chunk 21
data.frame(
row.names = c("Continus", paste0("M", seq(1, 6, 1)), "Discontinus", paste0("M", seq(7, 9, 1))),
DICs = c("", DIC1, DIC2, DIC3, DIC4, DIC5, DIC6, "", DIC7, DIC8, DIC9)
)
# Chunk 22
# On sort les résutats du modèle
M6
# Chunk 23
# On récupère les paramètres et on regarde leur distribution
res6 <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
# Rétrotransformation
shells6 <- matrix(NA,ncol=nrow(gopher),nrow=nrow(res6))
for (i in 1:nrow(gopher)){
shells6[,i] <-gopher$Area[i] * exp(res6$mu.0 + res6$alpha_0 * gopher$Cov_2004[i] + res6$alpha_1 * gopher$Cov_2005[i] + res6$alpha_2 * gopher$Cov_2006[i] + res6$b.prev * gopher$standprev[i]+rnorm(1,mean=0, sd=res6$sd.s))
}
hist(shells6)
mean(shells6)
# Chunk 24
# On sort les résutats du modèle
M9
# Chunk 25
# On récupère les paramètres et on regarde leur distribution
res9 <- M9$BUGSoutput$sims.matrix %>%
as.data.frame()
# Rétrotransformation
shells9 <- matrix(NA,ncol=nrow(gopher),nrow=nrow(res9))
for (i in 1:nrow(gopher)){
shells9[,i] <-gopher$Area[i] * exp(res9$mu.0 + res9$alpha_0 * gopher$Cov_2004[i] + res9$alpha_1 * gopher$Cov_2005[i] + res9$alpha_2 * gopher$Cov_2006[i] + res9$b.prev * gopher$H[i]+rnorm(1,mean=0, sd=res9$sd.s))
}
hist(shells9)
mean(shells9)
5*exp(-2.99+40*0.57)
5*exp(-2.99+40*0.57-0.42)
5*exp(-2.99+40*0.57-0.42+rnorm(1,mean=0, sd=0.32))
5*exp(-2.99-0.42+rnorm(1,mean=0, sd=0.32))
5*exp(-2.99+1*0.57-0.42+rnorm(1,mean=0, sd=0.32))
5*exp(-2.99+5*0.57-0.42+rnorm(1,mean=0, sd=0.32))
5*exp(-2.99+10*0.57-0.42+rnorm(1,mean=0, sd=0.32))
View(shells6)
mean(gopher$prev)
var(gopher$prev)
gopher$test <- (gopher$prev - mean(gopher$prev)) / sd(gopher$prev)
View(gopher)
mean(gopher$prev)
sd(gopher$prev)
sd(gopher$prev)**2
# Importation du fichier
gopher <- read.csv(file = "./gopher.csv", header = TRUE, sep = ";", dec=".", stringsAsFactors = TRUE) %>%
mutate(year = as.character(year),
total_turtle = density * Area,
standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov_2004 = ifelse(year == 2004, 1, 0),
Cov_2005 = ifelse(year == 2005, 1, 0),
Cov_2006 = ifelse(year == 2006, 1, 0))
5*exp(-2.99+5*0.57-0.42+rnorm(1,mean=0, sd=0.32))
5*exp(-2.99-0.42+rnorm(1,mean=0, sd=0.32))
# On sort les résutats du modèle
M9
exp(1.16)
exp(0.58)
exp(0.297)
exp(2.077)
exp( 0.165)
5*exp(-2.69-1.236+rnorm(1,mean=0, sd=0.58))
5*exp(-2.69-1.236+1.156+rnorm(1,mean=0, sd=0.58))
5*exp(-2.69-1.236+1.16+rnorm(1,mean=0, sd=0.58))
5*exp(1.16+rnorm(1,mean=0, sd=0.58)-2.69-1.236)
5*exp(rnorm(1,mean=0, sd=0.58)-2.69-1.236)
exp(-10)
exp(-2.9)
# On récupère les paramètres et on regarde leur distribution
res6 <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
# Rétrotransformation
shells6 <- matrix(NA,ncol=nrow(gopher),nrow=nrow(res6))
for (i in 1:nrow(gopher)){
shells6[,i] <-gopher$Area[i] * exp(res6$mu.0 + res6$alpha_0 * gopher$Cov_2004[i] + res6$alpha_1 * gopher$Cov_2005[i] + res6$alpha_2 * gopher$Cov_2006[i] + res6$b.prev * gopher$standprev[i]+rnorm(1,mean=0, sd=res6$sd.s))
}
shells6_1 <- c(shells6) %>%
as.data.frame()
colnames(shells6_1) <- c("shells")
ggplot(shells6_1, aes(x=shells)) +
geom_histogram()
mean(shells6)
ggplot(shells6_1, aes(x=shells)) +
geom_histogram()+
labs(caption="Figure 7 : Distribution du nombre de carapaces pour le modèle 6",
x="Carapaces",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=10, face="italic"),axis.title.x=element_text(size = 8), axis.title.y=element_text(size = 8))
ggplot(shells6_1, aes(x=shells)) +
geom_histogram(bins=10, fill="blue", color="black")+
labs(caption="Figure 7 : Distribution du nombre de carapaces pour le modèle 6",
x="Carapaces",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=10, face="italic"),axis.title.x=element_text(size = 8), axis.title.y=element_text(size = 8))
shells1_1 <- c(shells1) %>%
as.data.frame()
colnames(shells1_1) <- c("shells1")
ggplot(shells1_1, aes(x=shells1)) +
geom_histogram(bins=10, fill="blue", color="black")+
labs(caption="Figure 5 : Distribution du nombre de carapaces pour le modèle 1",
x="Carapaces",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=10, face="italic"),axis.title.x=element_text(size = 8), axis.title.y=element_text(size = 8))
shells9_1 <- c(shells9) %>%
as.data.frame()
colnames(shells9_1) <- c("shells")
ggplot(shells9_1, aes(x=shells)) +
geom_histogram(bins=10, fill="blue", color="black")+
labs(caption="Figure 8 : Distribution du nombre de carapaces pour le modèle 9",
x="Carapaces",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=10, face="italic"),axis.title.x=element_text(size = 8), axis.title.y=element_text(size = 8))
